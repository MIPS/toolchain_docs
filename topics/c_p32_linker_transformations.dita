<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="c_p32_linker_transformations">
 <title>Linker transformations</title>
 <conbody>
  <p>The p32 ABI is designed to support full link-time relaxation and rewriting. Some care is needed
   to avoid any hard-coded PC-relative offsets at assembly time and/or use appropriate annotation to
   ensure the code written in assembly text is guaranteed to remain the same after linking.</p>
  <p>An expansion may happen during linking if, for instance, a symbol is out-of-range. An example
   of this is a <codeph>BALC</codeph> instruction being rewritten in-place to<codeph>
    LAPC+JALRC</codeph>. The compiler long_call attribute is still supported and can be used to
   force the behaviour at the compile time. Most users can rely on the default options to expand the
   code sequences. </p>
  <p>The opposite of expansion is relaxation. The linker may transform an instruction into a more
   compressed one, for instance, it may replace 32-bit BC instruction with 16-bit BC if a symbol is
   within the range of the 16-bit instruction.</p>
  <p>Any instruction with a relocation record pointing at it can be rewritten at the link time
   unless the feature is disabled.</p>
  <p>Relaxations and expansions apply to both code and data references. A capable linker guarantees
   a successful link for any symbol reference. To find out what transformations the linker does for
   an executable, use the <codeph>--debug=target </codeph>to the linker or if GCC driver is used,
    <codeph>--Wl,--debug=target</codeph>; this will print all the transformations done on
   symbols.</p>
  <p>This feature can be controlled as follows:</p>
  <ul id="ul_sys_jgg_xcb">
   <li>At the module level, use compiler <codeph>â€“mno-relax </codeph>command line option. An object
    will be marked as non-relaxable. The linker will be forbidden to make any transformation in the
    object but can apply transformations to other modules (providing that other modules are
    relaxable). This option has a downside as it is fundamentally incompatible with the default code
    generation model (<codeph>-mcmodel=auto</codeph>). The default automatic model is dependent on
    the linker to fix any out-of-range references. Alternatively, <codeph>-mcmodel=medium</codeph>
    can be used with <codeph>-mno-relax </codeph>to generate immutable code. For an average size
    application a non-relaxable medium model will lead to successful. The medium model is comparable
    to the MIPS model and any out-of-range relocations would have to be fixed manually by using
     <codeph>long_call</codeph> attribute. As a last resort, the large model can be used to
    guarantee a successful link; however, this will have a negative impact on the code size.</li>
   <li>At the assembly code level, use assembler option <codeph>--linkrelax</codeph> or
     <codeph>.linkrelax</codeph> directive to enable the transformations. The relaxations and
    expansion for code fragments can be then controlled by wrapping the code with <codeph>.set
     nolinkrelax/.set linkrelax</codeph> or <codeph>.set push/.set</codeph> pop. For example: 
   <codeblock>    .text
    .linkrelax
    foo:
     .set nolinkrelax
     .set linkrelax
   </codeblock>
   <p>This is equivalent to:
   <codeblock>    .text
    .linkrelax
    foo:
     .set push
     .set nolinkrelax
     .set pop
   </codeblock></p></li>
  </ul>
  <note>The various relaxation options control both the relaxations and expansions.</note>
 </conbody>
</concept>
