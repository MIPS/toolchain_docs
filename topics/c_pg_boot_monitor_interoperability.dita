<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_hg4_rgq_fcb">
 <title>Boot monitor interoperability</title>
 <conbody>
  <p>The HAL supports the optional parts of the UHI specification for interoperability with boot
   monitors. This includes the ability to return back to a boot monitor upon completion of an
   application and also making use of UHI handling present in the monitor. The HAL follows an
   assumption described in the UHI specification that if started with Status.BEV clear then a boot
   monitor is present with UHI operation support in its exception handlers. The<codeph>
    __use_excpt_boot</codeph> setting can be used to override this assumption should it not hold
   true. </p>
  <p>The support code for this can be found in <codeph>mips_excpt_boot.S</codeph> and the functions
   provided are briefly described below. None of these functions are expected to be invoked or
   modified by ordinary users but advanced users who configure additional CP0 registers may wish to
   provide custom versions of these routines to preserve and restore more context. </p>
  <table id="table_bfj_sgq_fcb">
   <title>Boot monitor functions</title>
   <tgroup cols="2">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <thead>
     <row>
      <entry><b>Function prototype</b></entry>
      <entry><b>Description</b></entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><codeph>int __get_startup_BEV ()</codeph></entry>
      <entry>Obtains the value of the BEV bit from CP0 Status at the point of starting the
       application</entry>
     </row>
     <row>
      <entry><codeph>void* __register_excpt_boot (void * RA, int SR, void* cookie)</codeph></entry>
      <entry>Saves initial boot state. This function is called from a context which is
       representative of the original state at the point of starting the application. It stores all
       important state to enable<codeph> __return_to_boot</codeph> to restore the callerâ€™s context
       before exiting the application. The cookie is returned to the caller. Note that there is no
       stack available when this function is called.</entry>
     </row>
     <row>
      <entry><codeph>void __chain_uhi_excpt (struct gpctx* ctx)</codeph></entry>
      <entry>Restores the context from ctx and indirect jumps to the general exception vector entry
       point of the boot time (pre-application) exception vector. <codeph>$3</codeph> is clobbered to achieve the
       indirect branch which is compliant with the UHI specification. </entry>
     </row>
     <row>
      <entry><codeph>void __return_to_boot (int exitcode)</codeph></entry>
      <entry>If the UHI exit operation returns then return back to caller of _start with the
       specified exit code.</entry>
     </row>
     <row>
      <entry><codeph>void __convert_argv_pointers (void)</codeph></entry>
      <entry>Invoked with a non-standard ABI to convert argument pointers passed to a 32-bit
       application from a 64-bit environment. Memory is allocated from the stack to hold a new argv
       array and the envp array is replaced with a null pointer.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </conbody>
</concept>
