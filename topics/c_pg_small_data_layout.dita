<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_acz_44p_1cb">
 <title>Optimizing the layout of small data</title>
 <conbody>
<p>The nanoMIPS ISA supports a highly optimised global addressing mode that
provides direct access using a 16-bit instruction to 128 of the most commonly
referenced 4-byte data items. These data items must be placed at the start of
the small data area. Overlapping this region there is a 256KiB region that can
be used to access 1-byte or 2-byte data items with a single 32-bit
instruction. Finally overlapping these regions is a 2MiB region where 4-byte
data items can be accessed using a single 32-bit instruction. There are
commonly two issues that must be addressed to make good use of these
regions:</p>

<ul>
  <li>In order to use the first 128 small-data words that can be accessed by
16-bit instructions optimally, the data items need to be sorted so that the
most highly referenced are placed first. The check for this is complex as the
data must be 4-bytes in size and the source register of a store or destination
register of a load must be encodable by the optimised store/load
instruction.</li>
  <li>In order to use the 256KiB region in which sub-word data can be accessed
directly, all 1 and 2-byte data must precede the 4-byte and larger sized
data. Further, the data may end up in different sections depending on wheter
it is initialised or uninitialised.</li>
</ul>

<p>Optimizing the small-data works best when the total amount of small data
does not exceed the architectural limits for optimized access, that is</p>
  <ol>
    <li>The total size of 1 or 2-byte small data items does not exceed
256KiB.</li>
    <li>The total size of all qualified small data items, as determined by the
compiler option <codeph>-Gnum</codeph> does not exceed 2MiB.</li>
  </ol>

<p>For larger applications, users can restrict the size of small data to
the above limits by</p>
<ul>
  <li>Reducing the size of data types that qualify as small data using the
<codeph>-Gnum</codeph> compiler option. This parameter defaults to
8. Increasing it makes larger aggregate types such as arrays and structures
candidates for the small data region and increases the size of small data. It
can be reduced from 8 to 4 for the 32-bit ISA.</li>
  <li>Separating code into different modules and compiling them with
different options, such that GP-relative addressing is limited to a subset of
the codebase.</li>
  <li>Compiling all modules with the <codeph>-mgpopt -G0</codeph> and
hand-picking items for GP-relative access by specifying a section name for
each from <codeph>(.sdata|.sbss|.ssdata|.ssbss)</codeph> as appropriate.</li>
</ul>

<p>The nanoMIPS toolchain provides 2 schemes to optimize small data layout,
each with its own trade-offs:</p>
<ol>
<li>Script managed layout</li>
<li>Linker-automated optimized layout</li>
</ol>
 </conbody>
</concept>
